// Bismillah

/*When I write code, my only request to Creator(Allah) is that he opens
my eyes of knowledge. And may he be with me... And make everything
easy for me..Amin...............*/
// الله أكبر
// 真主至大

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define endl '\n'
#define ll long long int
#define inf INT_MAX
#define pii pair<int, int>
#define negInf INT_MIN
#define gcd(a, b) __gcd(a, b)
#define lcm(a, b) ((a * b) / gcd(a, b))
#define __pow(a, b) exp(b *log(a))
// void hey_output()
// {
// #ifndef ONLINE_JUDGE
//     freopen("input.txt", "r", stdin);
//     freopen("output.txt", "w", stdout);
// #endif
// }

using namespace __gnu_pbds;
using namespace std;
template <typename T>
using pbds = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
const int N = 1e5 + 7;
auto isPossible = [&](vector<ll> &x, ll n, ll c, ll d, ll k)
{
    if (k == 0)
    {
        return (x[0] * d >= c);
        //idont understand this problem properly but i understand concept and i solve it using solution bcz i want to leran binary search
    }
    ll sum = 0;

    if (k >= n)
    {
        for (int i = 0; i < n; ++i)
            sum += x[i];
    }
    else
    {
        for (int i = 0; i < k; ++i)
            sum += x[i];
    }
    ll rotated = d / k;
    ll get = rotated * sum;
    ll due = d % k;
    if (due >= n)
    {
        for (int i = 0; i < n; ++i)
            get += x[i];
    }
    else
    {
        for (int i = 0; i < due; ++i)
            get += x[i];
    }
    if (get >= c)
        return true;
    else
        return false;
};
void ____makeMeHappyReducePainGoAhedNeverGiveUPIWilBeSuccessInshaAllah____()
{
    // 阿萨杜扎曼 阿拉明
    //  如果心中充满信念，无比坚定，就一定会看到胜利。
    ll n, c, d;
    cin >> n >> c >> d;
    vector<ll> x(n);
    for (int i = 0; i < n; ++i)
        cin >> x[i];
    sort(x.begin(), x.end(), greater<ll>());
    ll candidateAnswer = 0;

    for (int i = 0; i < min(n, d); ++i)
        candidateAnswer += x[i];
    if (candidateAnswer >= c)
    {
        cout << "Infinity" << endl;
        return;
    }

    ll ans = -1;
    ll low = 0;
    ll high = 1e12;
    while (low <= high)
    {
        ll mid = (low + high) / 2;
        if (isPossible(x, n, c, d, mid + 1))
        {
            ans = mid;
            low = mid + 1;
        }
        else
            high = mid - 1;
    }
    if (ans == -1)
        cout << "Impossible" << endl;
    else
        cout << ans << endl;
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    // hey_output();

    int t = 1;
    cin >> t;
    while (t--)
    {
        ____makeMeHappyReducePainGoAhedNeverGiveUPIWilBeSuccessInshaAllah____();
    }

    return 0;
}
// Alhamdulillah
